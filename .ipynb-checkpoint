{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_csv('train.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>...</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8450</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>208500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9600</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2007</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>181500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11250</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>223500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>70</td>\n",
       "      <td>RL</td>\n",
       "      <td>60.0</td>\n",
       "      <td>9550</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Abnorml</td>\n",
       "      <td>140000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>84.0</td>\n",
       "      <td>14260</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>250000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 81 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n",
       "0   1          60       RL         65.0     8450   Pave   NaN      Reg   \n",
       "1   2          20       RL         80.0     9600   Pave   NaN      Reg   \n",
       "2   3          60       RL         68.0    11250   Pave   NaN      IR1   \n",
       "3   4          70       RL         60.0     9550   Pave   NaN      IR1   \n",
       "4   5          60       RL         84.0    14260   Pave   NaN      IR1   \n",
       "\n",
       "  LandContour Utilities  ... PoolArea PoolQC Fence MiscFeature MiscVal MoSold  \\\n",
       "0         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n",
       "1         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      5   \n",
       "2         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      9   \n",
       "3         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n",
       "4         Lvl    AllPub  ...        0    NaN   NaN         NaN       0     12   \n",
       "\n",
       "  YrSold  SaleType  SaleCondition  SalePrice  \n",
       "0   2008        WD         Normal     208500  \n",
       "1   2007        WD         Normal     181500  \n",
       "2   2008        WD         Normal     223500  \n",
       "3   2006        WD        Abnorml     140000  \n",
       "4   2008        WD         Normal     250000  \n",
       "\n",
       "[5 rows x 81 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RL         1151\n",
       "RM          218\n",
       "FV           65\n",
       "RH           16\n",
       "C (all)      10\n",
       "Name: MSZoning, dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['MSZoning'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'null'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-5-b58de3de5c91>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0msns\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mheatmap\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnull\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0myticklabels\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mcbar\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32mG:\\Users\\user\\anaconda3\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[1;34m(self, name)\u001b[0m\n\u001b[0;32m   5272\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5273\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 5274\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   5275\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5276\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mname\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m->\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'null'"
     ]
    }
   ],
   "source": [
    "sns.heatmap(df.null(),yticklabels=False,cbar=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1fb5e285b88>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(df.isnull(),yticklabels=False,cbar=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
